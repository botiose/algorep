* DONE open mpi
** DONE research non-blocking receive & refactor 'Messenger::receiveWithTag'
** DONE research thread safety of all used MPI commands
** DONE research whether Open MPI truly supports overwritting published names
* DONE code design
** DONE rename every 'command' variable to 'data'
* DONE leader election
** DONE comment the bully algorithm
** DONE refactor for multithreading
* DONE paxos
** DONE set the message unique id in the messenger class
** DONE refactor for multithreading
** DONE cleanup code 
** DONE document
* TODO server
** DONE implement leader port publishing 
** DONE implement accept thread
** DONE implement election thread
** DONE implement consensus thread
** DONE implement REPL thread
** DONE implement derived MessageHandler classes for each thread/tag
** DONE implement the MessageHandler class
** DONE move accept thread spawning in main to Node::create
** DONE implement probing blocking call in messenger
** DONE make a thread safe function for adding communicator to clientReceivers
** DONE in leader election add call to enableClientCommunication
** DONE start a leader election instead of setting the leader upon startup
** TODO [#A] implement failure detection heartbeat thread
** TODO [#C] give complete ownership of receiver to the receiver manager
* TODO messenger
** DONE change the 'cluster size' and rank getter to return the values
** TODO [#A] implement published port checking in the messenger
** TODO [#A] change blocking Send to non-blocking Isend
* DONE client
** DONE implement server communication
** DONE [#B] implement the random command generation script
** DONE [#B] implement reading and sending the commands in the command file
** DONE [#B] create a client-repl directory for the client's repl files
** DONE [#B] create a client-command directory for the client's random command files
** DONE handle repl shutdown in the client
** DONE set client speed sleep
* TODO doc
** TODO [#C] document header functions
** TODO [#C] why repl messaging is done through a file
** TODO [#C] why the repl-manager is passed to all other managers
** TODO [#C] why the accept thread is not an accept-manager
** TODO [#C] why the system relies on published port overwriting for client comm
