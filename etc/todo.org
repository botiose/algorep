* TODO open mpi
** DONE research non-blocking receive & refactor 'Messenger::receiveWithTag'
** DONE research thread safety of all used MPI commands
** TODO research whether Open MPI truly supports overwritting published names
* TODO code design
** TODO rename every 'command' variable to 'data'
** TODO restrict instantiation of 'Node's to one per process
* TODO leader election
** DONE comment the bully algorithm
** TODO research for the condition in which bully algorithm produces two leaders
** TODO refactor for multithreading
* TODO paxos
** DONE set the message unique id in the messenger class
** TODO refactor for multithreading
** TODO cleanup code 
** TODO document
* TODO server
** DONE implement leader port publishing 
** DONE implement accept thread
** TODO implement failure detection heartbeat thread
** TODO implement election thread
** DONE implement consensus thread
** DONE implement REPL thread
** DONE implement derived MessageHandler classes for each thread/tag
** DONE implement the MessageHandler class
** DONE move accept thread spawning in main to Node::create
** TODO enforce restricting startReceiveLoop to only be called on ReceiverManag.
** DONE implement probing blocking call in messenger
** DONE make a thread safe function for adding communicator to clientReceivers
** TODO implement logic for relinquishing leadership upon process recovery
** TODO in leader election add call to enableClientCommunication
** TODO start a leader election instead of setting the leader upon startup
* TODO messenger
** TODO change blocking Send to non-blocking Isend
** TODO change the 'cluster size' and rank getter to return the values
** TODO improve visibility of the clusterSize in 'node' and 'messenger'
* TODO client
** TODO implement random command generation
** TODO implement server communication
** TODO have an repl-msg file for each client and specify their ids through args
* TODO doc
** TODO why repl messaging is done through a file
** TODO why the repl-manager is passed to all other managers
